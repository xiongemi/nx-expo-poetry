{"version":3,"sources":["../../libs/services/src/models/poem-response.interface.ts","../../libs/services/src/poetry/poetry.service.ts","../../libs/store/src/lib/search/search.slice.ts","../../libs/store/src/lib/bookmarks/bookmarks.slice.ts","../../libs/store/src/lib/poem-of-the-day/poem-of-the-day.slice.ts","../../libs/store/src/lib/root/root-state.initial.ts","../../libs/store/src/lib/root/root.reducer.ts","../../libs/store/src/lib/root/persist-transform.ts","../../libs/ui/src/centre/centre.tsx","../../libs/ui/src/full-height/full-height.tsx","../../libs/ui/src/spacing/spacing.tsx","../../libs/ui/src/loading/loading.tsx","../../libs/ui/src/app-routes.enum.ts","../../libs/ui/src/show-loading/show-loading.tsx","../../libs/ui/src/poem-card/poem-card.tsx","../../libs/ui/src/poem-list-item/poem-list-item.tsx","src/app/bookmark/bookmark.tsx","src/app/bookmark/bookmark.props.ts","src/app/bookmarks/bookmark-list-item/bookmark-list-item.tsx","src/app/bookmarks/bookmarks.tsx","src/app/bookmarks/bookmarks.props.ts","src/app/poem-of-the-day/poem-of-the-day.tsx","src/app/poem-of-the-day/poem-of-the-day.props.ts","src/app/poem-result/poem-result.tsx","src/app/poem-result/poem-result.props.ts","src/app/search/search.tsx","src/app/search/search.props.ts","src/app/App.tsx","../../libs/store/src/lib/root/root.store.ts","index.js"],"names":["mapPoemResponseToPoem","response","title","author","lines","lineCount","parseInt","linecount","POETRY_BASE_URL","a","fetch","method","ok","json","poemResponse","status","getPoemsWithTitle","exactMatch","encodeURIComponent","getPoemsWithAuthor","console","log","searchQuery","Promise","all","then","poems1","poems2","forEach","poem","similarity","compareTwoStrings","map","sort","poem1","poem2","poetryService","getPoemOfTheDay","searchPoems","fetchSearch","createAsyncThunk","rejectWithValue","poemResponses","error","searchAdapter","createEntityAdapter","initialSearchState","getInitialState","loadingStatus","undefined","searchSlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","setAll","payload","id","rejected","message","searchReducer","reducer","actions","getSelectors","selectAll","selectEntities","selectById","getSearchState","rootState","selectAllSearchResults","createSelector","selectSearchEntities","getLoadingStatus","searchState","searchSelectors","selectSearchResultById","fetchBookmark","length","find","bookmarksAdapter","initialBookmarksState","bookmarksSlice","add","addOne","remove","removeOne","bookmarksReducer","bookmarksActions","getBookmarksState","bookmarksSelectors","selectAllBookmarks","selectBookmarksEntities","getBookmarkPoem","bookmarksState","fetchPoemOfTheDay","_","initialPoemOfTheDayState","poemOfTheDaySlice","poemOfTheDayReducer","getPoemOfTheDayState","poemOfTheDaySelelctors","getPoemOfTheDayLoadingStatus","initialRootState","poemOfTheDay","bookmarks","search","createRootReducer","combineReducers","transformEntityStateToPersist","createTransform","entityState","ids","JSON","stringify","entities","parse","whitelist","Centre","children","View","style","styles","center","StyleSheet","create","display","alignItems","justifyContent","FullHeight","container","flex","Spacing","spacing","margin","Loading","ActivityIndicator","animating","size","AppRoutes","ShowLoading","showLoading","hasError","reload","icon","Headline","Subheading","Button","onPress","mode","PoemCard","formattedDate","bookmark","goToSearch","navigation","useNavigation","useState","bookmarked","setBookmarked","SafeAreaView","ScrollView","contentInsetAdjustmentBehavior","Card","testID","Title","subtitle","Cover","source","uri","Actions","Content","split","index","Paragraph","line","Snackbar","visible","onDismiss","duration","label","navigate","Bookmarks","PoemListItem","descriptionNumberOfLines","description","descriptionEllipsizeMode","Divider","connect","dispatch","slice","date","Date","route","useRoute","params","format","useEffect","Search","BookmarkListItem","removeBookmark","right","IconButton","color","Colors","addBookmark","showRemoveSnackbar","setShowRemoveSnackbar","currentlyRemovedBookmark","setCurrentlyRemovedBookmark","onRemoveBookmark","Bookmark","searchResultById","setPoem","searchEntities","searchParam","React","setSearchQuery","onSearchQueryChange","text","Searchbar","placeholder","onChangeText","value","autoComplete","clearIcon","searchEntity","Result","App","persistConfig","rootReducer","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","defaultMiddleware","serializableCheck","devTools","process","preloadedState","persistor","persistStore","createRootStore","key","storage","AsyncStorage","transforms","theme","DefaultTheme","roundness","colors","primary","accent","Stack","createNativeStackNavigator","settings","props","Ionicons","loading","NavigationContainer","Navigator","initialRouteName","PoemOfTheDay","Screen","component","options","headerRight","PoemResult","registerRootComponent"],"mappings":"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","file":"static/js/app.d7be7c39.chunk.js","sourcesContent":["import { Poem } from '@nx-expo-poetry/models';\n\nexport interface PoemResponse {\n  title: string;\n  author: string;\n  lines: string[];\n  linecount: string;\n  similarity?: number;\n}\n\nexport function mapPoemResponseToPoem(response: PoemResponse): Poem {\n  return {\n    title: response.title,\n    author: response.author,\n    lines: response.lines,\n    lineCount: parseInt(response.linecount, 10),\n  };\n}\n","import { compareTwoStrings } from 'string-similarity';\n\nimport { PoemResponse } from '../models/poem-response.interface';\n\nconst POETRY_BASE_URL = 'https://poetrydb.org/';\n\nexport async function getPoemOfTheDay(): Promise<PoemResponse[]> {\n  const response: Response = await fetch(POETRY_BASE_URL + 'random', {\n    method: 'GET',\n  });\n  if (response.ok) {\n    const poemResponse = await response.json();\n    if (!poemResponse.status) {\n      // when it got a status code in the reponse, it is an invalid response\n      return poemResponse;\n    }\n  }\n  throw response;\n}\n\nexport async function getPoemsWithTitle(\n  title: string,\n  exactMatch = false\n): Promise<PoemResponse[]> {\n  const response: Response = await fetch(\n    POETRY_BASE_URL +\n      'title/' +\n      encodeURIComponent(title) +\n      `${exactMatch ? ':abs' : ''}`,\n    {\n      method: 'GET',\n    }\n  );\n  if (response.ok) {\n    const poemResponse = await response.json();\n    if (!poemResponse.status) {\n      // when it got a status code in the reponse, it is an invalid response\n      return poemResponse;\n    }\n  }\n  throw response;\n}\n\nexport async function getPoemsWithAuthor(\n  author: string\n): Promise<PoemResponse[]> {\n  console.log(POETRY_BASE_URL + 'author/' + encodeURIComponent(author));\n  const response: Response = await fetch(\n    POETRY_BASE_URL + 'author/' + encodeURIComponent(author),\n    {\n      method: 'GET',\n    }\n  );\n  if (response.ok) {\n    const poemResponse = await response.json();\n    if (!poemResponse.status) {\n      // when it got a status code in the reponse, it is an invalid response\n      return poemResponse;\n    }\n  }\n  throw response;\n}\n\nexport async function searchPoems(\n  searchQuery: string\n): Promise<PoemResponse[]> {\n  return Promise.all([\n    getPoemsWithTitle(searchQuery).catch(() => {\n      return [];\n    }),\n    getPoemsWithAuthor(searchQuery).catch(() => {\n      return [];\n    }),\n  ]).then(([poems1, poems2]) => {\n    console.log('poems2', poems2);\n    poems1.forEach(\n      (poem) => (poem.similarity = compareTwoStrings(poem.title, searchQuery))\n    );\n    poems2.map(\n      (poem) => (poem.similarity = compareTwoStrings(poem.author, searchQuery))\n    );\n    return [...poems1, ...poems2].sort(\n      (poem1: PoemResponse, poem2: PoemResponse) => {\n        return (poem2.similarity ?? 0) - (poem1.similarity ?? 0);\n      }\n    );\n  });\n}\n\nexport const poetryService = {\n  getPoemOfTheDay,\n  getPoemsWithTitle,\n  getPoemsWithAuthor,\n  searchPoems,\n};\n","import { LoadingStatus, Poem } from '@nx-expo-poetry/models';\nimport {\n  mapPoemResponseToPoem,\n  PoemResponse,\n  poetryService,\n} from '@nx-expo-poetry/services';\nimport {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n  EntityState,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n\nimport { RootState } from '../root/root-state.interface';\n\nexport const SEARCH_FEATURE_KEY = 'search';\n\nexport interface SearchEntity {\n  id: string;\n  poem: Poem;\n}\n\nexport interface SearchState extends EntityState<SearchEntity> {\n  loadingStatus: 'not loaded' | 'loading' | 'loaded' | 'error';\n  error?: string;\n}\n\nexport const fetchSearch = createAsyncThunk<\n  Poem[],\n  {\n    searchQuery: string;\n  }\n>('search/fetchStatus', async ({ searchQuery }, { rejectWithValue }) => {\n  try {\n    console.log('searchQuery', searchQuery);\n    const poemResponses: PoemResponse[] = await poetryService.searchPoems(\n      searchQuery\n    );\n\n    return poemResponses.map(mapPoemResponseToPoem);\n  } catch (error) {\n    return rejectWithValue({ error });\n  }\n});\n\nexport const searchAdapter = createEntityAdapter<SearchEntity>();\n\nexport const initialSearchState: SearchState = searchAdapter.getInitialState({\n  loadingStatus: 'not loaded',\n  error: undefined,\n});\n\nexport const searchSlice = createSlice({\n  name: SEARCH_FEATURE_KEY,\n  initialState: initialSearchState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchSearch.pending, (state: SearchState) => {\n        state.loadingStatus = 'loading';\n      })\n      .addCase(\n        fetchSearch.fulfilled,\n        (state: SearchState, action: PayloadAction<Poem[]>) => {\n          searchAdapter.setAll(\n            state,\n            action.payload.map((poem) => ({\n              id: encodeURIComponent(poem.title),\n              poem,\n            }))\n          );\n          state.loadingStatus = 'loaded';\n        }\n      )\n      .addCase(fetchSearch.rejected, (state: SearchState, action) => {\n        state.loadingStatus = 'error';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const searchReducer = searchSlice.reducer;\nexport const searchActions = searchSlice.actions;\n\nconst { selectAll, selectEntities, selectById } = searchAdapter.getSelectors();\n\nconst getSearchState = (rootState: RootState): SearchState =>\n  rootState[SEARCH_FEATURE_KEY];\n\nexport const selectAllSearchResults = createSelector(getSearchState, selectAll);\n\nexport const selectSearchEntities = createSelector(\n  getSearchState,\n  selectEntities\n);\n\nexport const selectSearchResultById = (id: string) =>\n  createSelector(\n    getSearchState,\n    (searchState: SearchState): SearchEntity | undefined => {\n      return selectById(searchState, id);\n    }\n  );\n\nconst getLoadingStatus = createSelector(\n  getSearchState,\n  (searchState): LoadingStatus => searchState.loadingStatus\n);\n\nexport const searchSelectors = {\n  getSearchState,\n  selectAllSearchResults,\n  selectSearchEntities,\n  selectSearchResultById,\n  getLoadingStatus,\n};\n","import { Poem } from '@nx-expo-poetry/models';\nimport {\n  mapPoemResponseToPoem,\n  PoemResponse,\n  poetryService,\n} from '@nx-expo-poetry/services';\nimport {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n  EntityState,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n\nimport { RootState } from '../root/root-state.interface';\n\nexport const BOOKMARKS_FEATURE_KEY = 'bookmarks';\n\nexport interface BookmarksEntity {\n  id: string;\n  formattedDate: string;\n  poem: Poem;\n}\n\nexport interface BookmarksState extends EntityState<BookmarksEntity> {\n  poem?: Poem;\n  loadingStatus: 'not loaded' | 'loading' | 'loaded' | 'error';\n  error?: string;\n}\n\nexport const fetchBookmark = createAsyncThunk<\n  Poem,\n  { title: string; author: string }\n>('bookmarks/fetchStatus', async ({ title, author }, { rejectWithValue }) => {\n  try {\n    const poemResponses: PoemResponse[] = await poetryService.getPoemsWithTitle(\n      title,\n      true\n    );\n    if (!poemResponses.length) {\n      return rejectWithValue({ error: 'not found' });\n    }\n    if (poemResponses.length > 1) {\n      const poemResponse = poemResponses.find(\n        (poemResponse) => poemResponse.author === author\n      );\n      if (!poemResponse) {\n        return rejectWithValue({ error: 'not found' });\n      }\n      return mapPoemResponseToPoem(poemResponse);\n    }\n    return mapPoemResponseToPoem(poemResponses[0]);\n  } catch (error) {\n    return rejectWithValue({ error });\n  }\n});\n\nexport const bookmarksAdapter = createEntityAdapter<BookmarksEntity>();\n\nexport const initialBookmarksState: BookmarksState =\n  bookmarksAdapter.getInitialState({\n    loadingStatus: 'not loaded',\n    error: undefined,\n  });\n\nexport const bookmarksSlice = createSlice({\n  name: BOOKMARKS_FEATURE_KEY,\n  initialState: initialBookmarksState,\n  reducers: {\n    add: bookmarksAdapter.addOne,\n    remove: bookmarksAdapter.removeOne,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchBookmark.pending, (state: BookmarksState) => {\n        state.loadingStatus = 'loading';\n      })\n      .addCase(\n        fetchBookmark.fulfilled,\n        (state: BookmarksState, action: PayloadAction<Poem>) => {\n          state.poem = action.payload;\n          state.loadingStatus = 'loaded';\n        }\n      )\n      .addCase(fetchBookmark.rejected, (state: BookmarksState, action) => {\n        state.loadingStatus = 'error';\n        state.error = action.error.message;\n      });\n  },\n});\n\n/*\n * Export reducer for store configuration.\n */\nexport const bookmarksReducer = bookmarksSlice.reducer;\n\nexport const bookmarksActions = bookmarksSlice.actions;\n\nconst { selectAll, selectEntities } = bookmarksAdapter.getSelectors();\n\nconst getBookmarksState = (rootState: RootState): BookmarksState =>\n  rootState[BOOKMARKS_FEATURE_KEY];\n\nconst selectAllBookmarks = createSelector(getBookmarksState, selectAll);\n\nconst selectBookmarksEntities = createSelector(\n  getBookmarksState,\n  selectEntities\n);\n\nconst getBookmarkPoem = createSelector(\n  getBookmarksState,\n  (bookmarksState: BookmarksState) => bookmarksState.poem\n);\n\nexport const bookmarksSelectors = {\n  selectAllBookmarks,\n  selectBookmarksEntities,\n  getBookmarkPoem,\n};\n","import { LoadingStatus, Poem } from '@nx-expo-poetry/models';\nimport {\n  mapPoemResponseToPoem,\n  PoemResponse,\n  poetryService,\n} from '@nx-expo-poetry/services';\nimport {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n\nimport { RootState } from '../root/root-state.interface';\n\nexport const POEM_OF_THE_DAY_FEATURE_KEY = 'poemOfTheDay';\n\nexport interface PoemOfTheDayState {\n  loadingStatus: LoadingStatus;\n  poem?: Poem;\n  error?: string;\n}\n\nexport const fetchPoemOfTheDay = createAsyncThunk<Poem, void>(\n  'poemOfTheDay/fetchStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const poemResponses: PoemResponse[] =\n        await poetryService.getPoemOfTheDay();\n      return mapPoemResponseToPoem(poemResponses[0]);\n    } catch (error) {\n      return rejectWithValue({ error });\n    }\n  }\n);\n\nexport const initialPoemOfTheDayState: PoemOfTheDayState = {\n  loadingStatus: 'not loaded',\n  poem: undefined,\n  error: undefined,\n};\n\nexport const poemOfTheDaySlice = createSlice({\n  name: POEM_OF_THE_DAY_FEATURE_KEY,\n  initialState: initialPoemOfTheDayState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPoemOfTheDay.pending, (state: PoemOfTheDayState) => {\n        state.loadingStatus = 'loading';\n      })\n      .addCase(\n        fetchPoemOfTheDay.fulfilled,\n        (state: PoemOfTheDayState, action: PayloadAction<Poem>) => {\n          state.poem = action.payload;\n          state.loadingStatus = 'loaded';\n        }\n      )\n      .addCase(\n        fetchPoemOfTheDay.rejected,\n        (state: PoemOfTheDayState, action) => {\n          state.loadingStatus = 'error';\n          state.error = action.error.message;\n        }\n      );\n  },\n});\n\n/*\n * Export reducer for store configuration.\n */\nexport const poemOfTheDayReducer = poemOfTheDaySlice.reducer;\n\nexport const poemOfTheDayActions = poemOfTheDaySlice.actions;\n\nconst getPoemOfTheDayState = (rootState: RootState): PoemOfTheDayState =>\n  rootState[POEM_OF_THE_DAY_FEATURE_KEY];\n\nconst getPoemOfTheDay = createSelector(\n  getPoemOfTheDayState,\n  (state: PoemOfTheDayState) => state.poem\n);\n\nconst getPoemOfTheDayLoadingStatus = createSelector(\n  getPoemOfTheDayState,\n  (state: PoemOfTheDayState): LoadingStatus => state.loadingStatus\n);\n\nexport const poemOfTheDaySelelctors = {\n  getPoemOfTheDayState,\n  getPoemOfTheDay,\n  getPoemOfTheDayLoadingStatus,\n};\n","import { initialBookmarksState } from '../bookmarks/bookmarks.slice';\nimport { initialPoemOfTheDayState } from '../poem-of-the-day/poem-of-the-day.slice';\nimport { initialSearchState } from '../search/search.slice';\n\nimport { RootState } from './root-state.interface';\n\nexport const initialRootState: RootState = {\n  poemOfTheDay: initialPoemOfTheDayState,\n  bookmarks: initialBookmarksState,\n  search: initialSearchState,\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { bookmarksReducer } from '../bookmarks/bookmarks.slice';\nimport { poemOfTheDayReducer } from '../poem-of-the-day/poem-of-the-day.slice';\nimport { searchReducer } from '../search/search.slice';\n\nimport { RootState } from './root-state.interface';\n\nexport const createRootReducer = combineReducers<RootState>({\n  poemOfTheDay: poemOfTheDayReducer,\n  bookmarks: bookmarksReducer,\n  search: searchReducer,\n});\n","import { EntityState } from '@reduxjs/toolkit';\nimport { createTransform } from 'redux-persist';\n\nimport { BOOKMARKS_FEATURE_KEY } from '../bookmarks/bookmarks.slice';\n\nconst transformEntityStateToPersist = createTransform(\n  // transform state on its way to being serialized and persisted.\n  (\n    entityState: EntityState<any>\n  ): {\n    ids: string;\n    entities: any;\n  } => {\n    return {\n      ...entityState,\n      ids: JSON.stringify(entityState.ids),\n      entities: JSON.stringify(entityState.entities),\n    };\n  },\n  // transform state being rehydrated\n  (entityState: { ids: string; entities: string }): EntityState<any> => {\n    return {\n      ...entityState,\n      ids: JSON.parse(entityState.ids),\n      entities: JSON.parse(entityState.entities),\n    };\n  },\n  // define which reducers this transform gets called for.\n  { whitelist: [BOOKMARKS_FEATURE_KEY] }\n);\n\nexport { transformEntityStateToPersist };\n","import React, { ReactNode } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const Centre = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.center}>{children}</View>;\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Centre;\n","import React, { ReactNode } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const FullHeight = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.container}>{children}</View>;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default FullHeight;\n","import React, { ReactNode } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const Spacing = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.spacing}>{children}</View>;\n};\n\nconst styles = StyleSheet.create({\n  spacing: {\n    margin: 10,\n  },\n});\n\nexport default Spacing;\n","import React from 'react';\nimport { ActivityIndicator } from 'react-native-paper';\n\nimport Centre from '../centre/centre';\nimport Spacing from '../spacing/spacing';\n\nexport function Loading() {\n  return (\n    <Centre>\n      <Spacing>\n        <ActivityIndicator animating={true} size=\"large\" children={undefined} />\n      </Spacing>\n    </Centre>\n  );\n}\n\nexport default Loading;\n","export enum AppRoutes {\n  PoemOfTheDay = 'Poem of the Day',\n  Bookmarks = 'Bookmarks',\n  Bookmark = 'Bookmark',\n  Search = 'Search',\n  Result = 'Result',\n}\n","import React, { ReactNode } from 'react';\nimport { Avatar, Button, Headline, Subheading } from 'react-native-paper';\n\nimport { Centre } from '../centre/centre';\nimport Loading from '../loading/loading';\nimport Spacing from '../spacing/spacing';\n\nexport interface ShowLoadingProps {\n  showLoading: boolean;\n  hasError: boolean;\n  reload?: () => void;\n  children: ReactNode;\n}\n\nexport function ShowLoading({\n  showLoading,\n  hasError,\n  reload,\n  children,\n}: ShowLoadingProps) {\n  return showLoading ? (\n    <Loading></Loading>\n  ) : hasError ? (\n    <Centre>\n      <Spacing>\n        <Avatar.Icon size={40} icon=\"alert\" children={undefined} />\n      </Spacing>\n      <Headline>Oops~ Something went wrong</Headline>\n      <Subheading>Make sure you got internet connection.</Subheading>\n      {reload && (\n        <Button onPress={reload} mode=\"contained\">\n          Try Again\n        </Button>\n      )}\n    </Centre>\n  ) : (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>{children}</>\n  );\n}\n\nexport default ShowLoading;\n","import { LoadingStatus, Poem } from '@nx-expo-poetry/models';\n\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { SafeAreaView, ScrollView } from 'react-native';\nimport {\n  Card,\n  Paragraph,\n  Headline,\n  Button,\n  Snackbar,\n} from 'react-native-paper';\n\nimport { AppRoutes } from '../app-routes.enum';\nimport Centre from '../centre/centre';\nimport FullHeight from '../full-height/full-height';\nimport ShowLoading from '../show-loading/show-loading';\n\nexport interface PoemCardProps {\n  loadingStatus: LoadingStatus;\n  formattedDate: string;\n  bookmark: (formattedDate: string, poem: Poem) => void;\n  poem?: Poem;\n  fetch?: () => void;\n  goToSearch: (searchQuery: string) => void;\n}\n\nexport function PoemCard({\n  loadingStatus,\n  formattedDate,\n  poem,\n  bookmark,\n  fetch,\n  goToSearch,\n}: PoemCardProps) {\n  const navigation = useNavigation();\n  const [bookmarked, setBookmarked] = useState<boolean>(false);\n\n  const onBookmarkPoem = () => {\n    if (!poem) return;\n    bookmark(formattedDate, poem);\n    setBookmarked(true);\n  };\n\n  return (\n    <FullHeight>\n      <SafeAreaView>\n        <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n          <ShowLoading\n            showLoading={\n              loadingStatus === 'not loaded' || loadingStatus === 'loading'\n            }\n            hasError={loadingStatus === 'error'}\n            reload={fetch}\n          >\n            <Card testID=\"poem-card\">\n              <Card.Title\n                testID=\"poem-card-title\"\n                title={poem?.title}\n                subtitle={formattedDate}\n              />\n              <Card.Cover source={{ uri: `https://picsum.photos/300/200` }} />\n              <Card.Actions>\n                <Button icon=\"heart-outline\" onPress={onBookmarkPoem}>\n                  Bookmark\n                </Button>\n                {fetch && (\n                  <Button\n                    icon=\"play-skip-forward-outline\"\n                    onPress={() => fetch()}\n                  >\n                    Next\n                  </Button>\n                )}\n                {goToSearch && (\n                  <Button icon=\"search\" onPress={() => goToSearch('')}>\n                    Search\n                  </Button>\n                )}\n              </Card.Actions>\n              <Card.Content>\n                <Centre>\n                  <Headline>{poem?.title}</Headline>\n                  {poem?.author?.split(',')?.map((author, index) => (\n                    <Button key={index} onPress={() => goToSearch(author)}>\n                      {author}\n                    </Button>\n                  ))}\n                </Centre>\n                <Paragraph>{poem?.lines?.map((line) => line + '\\n')}</Paragraph>\n              </Card.Content>\n            </Card>\n          </ShowLoading>\n        </ScrollView>\n      </SafeAreaView>\n      <Snackbar\n        visible={bookmarked}\n        onDismiss={() => setBookmarked(false)}\n        duration={5000}\n        action={{\n          label: 'View All',\n          onPress: () => navigation.navigate(AppRoutes.Bookmarks),\n        }}\n      >\n        Poem bookmarked!\n      </Snackbar>\n    </FullHeight>\n  );\n}\n","import { Poem } from '@nx-expo-poetry/models';\n\nimport React from 'react';\nimport { Divider, List } from 'react-native-paper';\n\nexport interface PoemListItemProps {\n  poem: Poem;\n  onPress: () => void;\n}\n\nexport function PoemListItem({ poem, onPress }: PoemListItemProps) {\n  return (\n    poem && (\n      <>\n        <List.Item\n          title={poem.title}\n          descriptionNumberOfLines={3}\n          description={\n            poem.author +\n            '\\n' +\n            poem.lines?.[0] +\n            ' ' +\n            poem.lines?.[1] +\n            ' ...'\n          }\n          descriptionEllipsizeMode=\"tail\"\n          onPress={onPress}\n        />\n        <Divider />\n      </>\n    )\n  );\n}\n\nexport default PoemListItem;\n","import { AppRoutes, PoemCard } from '@nx-expo-poetry/ui';\nimport { RouteProp, useNavigation, useRoute } from '@react-navigation/native';\nimport { format } from 'date-fns';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  mapDispatchToProps,\n  mapStateToProps,\n  BookmarkProps,\n} from './bookmark.props';\n\nexport function PoemResult({ poem, fetchBookmark, bookmark }: BookmarkProps) {\n  const date = new Date();\n\n  const navigation = useNavigation();\n  const route = useRoute<\n    RouteProp<{\n      params: { formattedDate: string; title: string; author: string };\n    }>\n  >();\n  const title = route.params?.title;\n  const author = route.params?.author;\n  const formattedDate =\n    route.params?.formattedDate || format(date, 'MMMM do, yyyy');\n\n  useEffect(() => {\n    if (title) {\n      fetchBookmark(title, author);\n    }\n  }, [title, author, fetchBookmark]);\n\n  return (\n    <PoemCard\n      loadingStatus={'loaded'}\n      formattedDate={formattedDate}\n      poem={poem}\n      bookmark={bookmark}\n      goToSearch={(searchQuery: string) =>\n        navigation.navigate(AppRoutes.Search, { search: searchQuery })\n      }\n    />\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PoemResult);\n","import { Poem } from '@nx-expo-poetry/models';\nimport {\n  bookmarksActions,\n  bookmarksSelectors,\n  fetchBookmark,\n  RootState,\n} from '@nx-expo-poetry/store';\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    poem: bookmarksSelectors.getBookmarkPoem(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    fetchBookmark(title: string, author: string) {\n      dispatch(fetchBookmark({ title, author }));\n    },\n    bookmark(formattedDate: string, poem: Poem) {\n      dispatch(\n        bookmarksActions.add({\n          formattedDate,\n          id: encodeURIComponent(poem.title),\n          poem: {\n            ...poem,\n            lines: poem.lines.slice(0, 1),\n          },\n        })\n      );\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype BookmarkProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { BookmarkProps };\n","import { BookmarksEntity } from '@nx-expo-poetry/store';\nimport React from 'react';\nimport { List, IconButton, Colors } from 'react-native-paper';\n\nexport interface BookmarkListItemProps {\n  bookmark: BookmarksEntity;\n  removeBookmark: (bookmark: BookmarksEntity) => void;\n  onPress: () => void;\n}\n\nexport function BookmarkListItem({\n  bookmark,\n  removeBookmark,\n  onPress,\n}: BookmarkListItemProps) {\n  return (\n    <List.Item\n      title={bookmark.poem.title}\n      descriptionNumberOfLines={3}\n      description={\n        bookmark.formattedDate + '\\n' + bookmark.poem.lines[0] + '...'\n      }\n      descriptionEllipsizeMode=\"tail\"\n      onPress={onPress}\n      right={() => (\n        <IconButton\n          size={30}\n          icon=\"remove-circle\"\n          color={Colors.red500}\n          onPress={() => removeBookmark(bookmark)}\n        />\n      )}\n    />\n  );\n}\n\nexport default BookmarkListItem;\n","import { BookmarksEntity } from '@nx-expo-poetry/store';\nimport { AppRoutes, Centre, FullHeight, Spacing } from '@nx-expo-poetry/ui';\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { SafeAreaView, ScrollView, View } from 'react-native';\nimport { Avatar, Divider, Headline, Snackbar } from 'react-native-paper';\nimport { connect } from 'react-redux';\n\nimport BookmarkListItem from './bookmark-list-item/bookmark-list-item';\nimport {\n  mapStateToProps,\n  mapDispatchToProps,\n  BookmarksProps,\n} from './bookmarks.props';\n\nexport function Bookmarks({\n  bookmarks,\n  removeBookmark,\n  addBookmark,\n}: BookmarksProps) {\n  const navigation = useNavigation();\n  const [showRemoveSnackbar, setShowRemoveSnackbar] = useState<boolean>(false);\n  const [currentlyRemovedBookmark, setCurrentlyRemovedBookmark] =\n    useState<BookmarksEntity>();\n\n  const onRemoveBookmark = (bookmark: BookmarksEntity) => {\n    removeBookmark(bookmark);\n    setCurrentlyRemovedBookmark(bookmark);\n    setShowRemoveSnackbar(true);\n  };\n\n  return (\n    <FullHeight>\n      <SafeAreaView>\n        <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n          {bookmarks && bookmarks?.length ? (\n            bookmarks.map(\n              (bookmark: BookmarksEntity) =>\n                bookmark &&\n                bookmark.poem && (\n                  <View key={bookmark.id}>\n                    <BookmarkListItem\n                      bookmark={bookmark}\n                      removeBookmark={onRemoveBookmark}\n                      onPress={() =>\n                        navigation.navigate(AppRoutes.Bookmark, {\n                          formattedDate: bookmark.formattedDate,\n                          title: bookmark.poem.title,\n                          author: bookmark.poem.author,\n                        })\n                      }\n                    />\n                    <Divider />\n                  </View>\n                )\n            )\n          ) : (\n            <Centre>\n              <Spacing>\n                <Avatar.Icon size={40} icon=\"book\" children={undefined} />\n              </Spacing>\n              <Spacing>\n                <Headline>No poems bookmarked~</Headline>\n              </Spacing>\n            </Centre>\n          )}\n        </ScrollView>\n      </SafeAreaView>\n      <Snackbar\n        visible={showRemoveSnackbar}\n        onDismiss={() => setShowRemoveSnackbar(false)}\n        action={{\n          label: 'Undo',\n          onPress: () => {\n            if (currentlyRemovedBookmark) {\n              addBookmark(currentlyRemovedBookmark);\n            }\n          },\n        }}\n      >\n        Remove {currentlyRemovedBookmark?.poem?.title}\n      </Snackbar>\n    </FullHeight>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bookmarks);\n","import {\n  RootState,\n  bookmarksSelectors,\n  bookmarksActions,\n  BookmarksEntity,\n} from '@nx-expo-poetry/store';\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    bookmarks: bookmarksSelectors.selectAllBookmarks(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    removeBookmark(bookmark: BookmarksEntity) {\n      dispatch(bookmarksActions.remove(bookmark.id));\n    },\n    addBookmark(bookmark: BookmarksEntity) {\n      dispatch(bookmarksActions.add(bookmark));\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype BookmarksProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { BookmarksProps };\n","import { AppRoutes, PoemCard } from '@nx-expo-poetry/ui';\nimport { useNavigation } from '@react-navigation/native';\nimport { format } from 'date-fns';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  mapDispatchToProps,\n  mapStateToProps,\n  PoemOfTheDayProps,\n} from './poem-of-the-day.props';\n\nexport function PoemOfTheDay({\n  poem,\n  fetchPoemOfTheDay,\n  bookmark,\n  loadingStatus,\n}: PoemOfTheDayProps) {\n  const date = new Date();\n  const formattedDate = format(date, 'MMMM do, yyyy');\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    fetchPoemOfTheDay();\n  }, [fetchPoemOfTheDay]);\n\n  const goToSearch = (searchQuery: string) =>\n    navigation.navigate(AppRoutes.Search, { search: searchQuery });\n\n  return (\n    <PoemCard\n      fetch={fetchPoemOfTheDay}\n      loadingStatus={loadingStatus}\n      formattedDate={formattedDate}\n      poem={poem}\n      bookmark={bookmark}\n      goToSearch={goToSearch}\n    />\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PoemOfTheDay);\n","import { Poem } from '@nx-expo-poetry/models';\nimport {\n  RootState,\n  poemOfTheDaySelelctors,\n  fetchPoemOfTheDay,\n  bookmarksActions,\n} from '@nx-expo-poetry/store';\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    poem: poemOfTheDaySelelctors.getPoemOfTheDay(state),\n    loadingStatus: poemOfTheDaySelelctors.getPoemOfTheDayLoadingStatus(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    fetchPoemOfTheDay() {\n      dispatch(fetchPoemOfTheDay());\n    },\n    bookmark(formattedDate: string, poem: Poem) {\n      dispatch(\n        bookmarksActions.add({\n          formattedDate,\n          id: encodeURIComponent(poem.title),\n          poem: {\n            ...poem,\n            lines: poem.lines.slice(0, 1),\n          },\n        })\n      );\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype PoemOfTheDayProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { PoemOfTheDayProps };\n","import { Poem } from '@nx-expo-poetry/models';\nimport { PoemCard, AppRoutes } from '@nx-expo-poetry/ui';\nimport { RouteProp, useNavigation, useRoute } from '@react-navigation/native';\nimport { format } from 'date-fns';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  mapDispatchToProps,\n  mapStateToProps,\n  PoemResultProps,\n} from './poem-result.props';\n\nexport function PoemResult({ searchResultById, bookmark }: PoemResultProps) {\n  const date = new Date();\n\n  const [poem, setPoem] = useState<Poem>();\n\n  const navigation = useNavigation();\n  const route = useRoute<\n    RouteProp<{\n      params: { id: string };\n    }>\n  >();\n  const id = route.params?.id;\n  const formattedDate = format(date, 'MMMM do, yyyy');\n\n  useEffect(() => {\n    if (id) {\n      setPoem(searchResultById(id)?.poem);\n    }\n  }, [id, searchResultById]);\n\n  return (\n    <PoemCard\n      loadingStatus={'loaded'}\n      formattedDate={formattedDate}\n      poem={poem}\n      bookmark={bookmark}\n      goToSearch={(searchQuery: string) =>\n        navigation.navigate(AppRoutes.Search, { search: searchQuery })\n      }\n    />\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PoemResult);\n","import { Poem } from '@nx-expo-poetry/models';\nimport {\n  bookmarksActions,\n  RootState,\n  searchSelectors,\n} from '@nx-expo-poetry/store';\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    searchResultById: (id: string) =>\n      searchSelectors.selectSearchResultById(id)(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    bookmark(formattedDate: string, poem: Poem) {\n      dispatch(\n        bookmarksActions.add({\n          formattedDate,\n          id: encodeURIComponent(poem.title),\n          poem: {\n            ...poem,\n            lines: poem.lines.slice(0, 1),\n          },\n        })\n      );\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype PoemResultProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { PoemResultProps };\n","import {\n  Centre,\n  PoemListItem,\n  ShowLoading,\n  Spacing,\n  AppRoutes,\n} from '@nx-expo-poetry/ui';\nimport { RouteProp, useNavigation, useRoute } from '@react-navigation/native';\nimport React, { useEffect } from 'react';\nimport { SafeAreaView, ScrollView } from 'react-native';\nimport { Avatar, Headline, Searchbar } from 'react-native-paper';\nimport { connect } from 'react-redux';\n\nimport {\n  mapDispatchToProps,\n  mapStateToProps,\n  SearchProps,\n} from './search.props';\n\nexport function Search({\n  searchEntities,\n  loadingStatus,\n  fetchSearch,\n}: SearchProps) {\n  const navigation = useNavigation();\n  const route = useRoute<RouteProp<{ params: { search: string } }>>();\n  const searchParam = route.params?.search;\n  const [searchQuery, setSearchQuery] = React.useState('');\n\n  useEffect(() => {\n    if (searchParam && searchParam.length) {\n      setSearchQuery(searchParam);\n      fetchSearch(searchParam);\n    }\n  }, [fetchSearch, searchParam]);\n\n  const onSearchQueryChange = (text: string) => {\n    setSearchQuery(text);\n    if (text && text.length > 3) {\n      fetchSearch(text);\n    }\n  };\n\n  return (\n    <SafeAreaView>\n      <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n        <Searchbar\n          placeholder=\"Search any poem title or author\"\n          onChangeText={onSearchQueryChange}\n          value={searchQuery}\n          children={undefined}\n          autoComplete={undefined}\n          icon=\"search\"\n          clearIcon=\"close\"\n        />\n        <ShowLoading\n          showLoading={loadingStatus === 'loading'}\n          hasError={loadingStatus === 'error'}\n          reload={() => onSearchQueryChange(searchQuery)}\n        >\n          {searchQuery && searchQuery.length > 3 ? (\n            searchEntities && searchEntities.length ? (\n              searchEntities.map((searchEntity) => (\n                <PoemListItem\n                  key={searchEntity.id}\n                  poem={searchEntity.poem}\n                  onPress={() =>\n                    navigation.navigate(AppRoutes.Result, {\n                      id: searchEntity.id,\n                    })\n                  }\n                />\n              ))\n            ) : (\n              <Centre>\n                <Spacing>\n                  <Avatar.Icon size={40} icon=\"alert\" children={undefined} />\n                </Spacing>\n                <Headline>Nothing found~</Headline>\n              </Centre>\n            )\n          ) : (\n            // eslint-disable-next-line react/jsx-no-useless-fragment\n            <></>\n          )}\n        </ShowLoading>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import { RootState, searchSelectors, fetchSearch } from '@nx-expo-poetry/store';\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    searchEntities: searchSelectors.selectAllSearchResults(state),\n    loadingStatus: searchSelectors.getLoadingStatus(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    fetchSearch(searchQuery: string) {\n      dispatch(fetchSearch({ searchQuery }));\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype SearchProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { SearchProps };\n","import { Ionicons } from '@expo/vector-icons';\nimport {\n  BOOKMARKS_FEATURE_KEY,\n  createRootStore,\n  transformEntityStateToPersist,\n} from '@nx-expo-poetry/store';\nimport { Loading, AppRoutes, RootStackParamList } from '@nx-expo-poetry/ui';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport React from 'react';\nimport {\n  DefaultTheme,\n  IconButton,\n  Provider as PaperProvider,\n} from 'react-native-paper';\nimport { Provider as StoreProvider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport Bookmark from './bookmark/bookmark';\nimport Bookmarks from './bookmarks/bookmarks';\nimport PoemOfTheDay from './poem-of-the-day/poem-of-the-day';\nimport PoemResult from './poem-result/poem-result';\nimport Search from './search/search';\n\nconst App = () => {\n  const persistConfig = {\n    key: 'root',\n    storage: AsyncStorage,\n    whitelist: [BOOKMARKS_FEATURE_KEY],\n    transforms: [transformEntityStateToPersist],\n  };\n  const { store, persistor } = createRootStore(persistConfig);\n\n  const theme = {\n    ...DefaultTheme,\n    roundness: 2,\n    colors: {\n      ...DefaultTheme.colors,\n      primary: '#855913',\n      accent: '#aec5c5',\n    },\n  };\n\n  const Stack = createNativeStackNavigator<RootStackParamList>();\n\n  return (\n    <PaperProvider\n      theme={theme}\n      settings={{\n        icon: (props: any) => <Ionicons {...props} />,\n      }}\n    >\n      <PersistGate loading={<Loading />} persistor={persistor}>\n        <StoreProvider store={store}>\n          <NavigationContainer>\n            <Stack.Navigator initialRouteName={AppRoutes.PoemOfTheDay}>\n              <Stack.Screen\n                name={AppRoutes.PoemOfTheDay}\n                component={PoemOfTheDay}\n                options={({ navigation }) => ({\n                  headerRight: () => (\n                    <IconButton\n                      icon=\"book\"\n                      onPress={() => navigation.navigate(AppRoutes.Bookmarks)}\n                    />\n                  ),\n                })}\n              />\n              <Stack.Screen name={AppRoutes.Bookmarks} component={Bookmarks} />\n              <Stack.Screen name={AppRoutes.Search} component={Search} />\n              <Stack.Screen name={AppRoutes.Result} component={PoemResult} />\n              <Stack.Screen name={AppRoutes.Bookmark} component={Bookmark} />\n            </Stack.Navigator>\n          </NavigationContainer>\n        </StoreProvider>\n      </PersistGate>\n    </PaperProvider>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer, PersistConfig } from 'redux-persist';\n\nimport { initialRootState } from './root-state.initial';\nimport { RootState } from './root-state.interface';\nimport { createRootReducer } from './root.reducer';\n\ndeclare const process: any;\n\nexport const createRootStore = (persistConfig: PersistConfig<RootState>) => {\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  const rootReducer = createRootReducer;\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n  const store = configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => {\n      const defaultMiddleware = getDefaultMiddleware({\n        serializableCheck: false,\n      });\n      return isDevelopment\n        ? defaultMiddleware.concat(logger)\n        : defaultMiddleware;\n    },\n    devTools: isDevelopment,\n    preloadedState: initialRootState,\n  });\n\n  const persistor = persistStore(store);\n\n  return { store, persistor };\n};\n","import { registerRootComponent } from 'expo';\n\nimport App from './src/app/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}